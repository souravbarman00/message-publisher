# Alternative render.yaml with static frontend
services:
  # API Service
  - type: web
    name: message-publisher-api
    runtime: docker
    dockerfilePath: ./api/Dockerfile
    dockerContext: ./api
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 4000
      - key: AWS_REGION
        value: ap-southeast-1
      - key: AWS_ACCESS_KEY_ID
        sync: false  # Set in Render dashboard
      - key: AWS_SECRET_ACCESS_KEY
        sync: false  # Set in Render dashboard
      - key: SNS_TOPIC_ARN
        sync: false  # Set in Render dashboard
      - key: SQS_QUEUE_URL
        sync: false  # Set in Render dashboard
      - key: KAFKA_BROKERS
        sync: false  # Set in Render dashboard
      - key: KAFKA_TOPIC
        value: demo-topic
    healthCheckPath: /api/health

  # Workers Service  
  - type: worker
    name: message-publisher-workers
    runtime: docker
    dockerfilePath: ./workers/Dockerfile
    dockerContext: ./workers
    envVars:
      - key: NODE_ENV
        value: production
      - key: AWS_REGION
        value: ap-southeast-1
      - key: AWS_ACCESS_KEY_ID
        sync: false  # Set in Render dashboard
      - key: AWS_SECRET_ACCESS_KEY
        sync: false  # Set in Render dashboard
      - key: SNS_TOPIC_ARN
        sync: false  # Set in Render dashboard
      - key: SQS_QUEUE_URL
        sync: false  # Set in Render dashboard
      - key: KAFKA_BROKERS
        sync: false  # Set in Render dashboard
      - key: KAFKA_TOPIC
        value: demo-topic
      - key: KAFKA_CONSUMER_GROUP
        value: message-publisher-workers

  # Frontend Service (Static Site Alternative)
  - type: static
    name: message-publisher-frontend
    buildCommand: npm install && npm run build
    staticPublishPath: ./build
    rootDir: ./frontend
    envVars:
      - key: REACT_APP_API_URL
        fromService:
          type: web
          name: message-publisher-api
          property: host
